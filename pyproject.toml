[project]
name = "rocketseat_python_solid_principles"
version = "1.0.0"
description = ""
authors = [{ name = "Pedro Dias" }]
readme = "README.md"
requires-python = ">= 3.13, <4.0"
dependencies = [
    "flask (>=3.1.1,<4.0.0)",
    ]


[tool.poetry]
package-mode = false


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
bandit = "^1.8.3"
black = "^25.1.0"
flake8 = "^7.2.0"
flake8-pyproject = "^1.2.3"
isort = "^6.0.1"
pre-commit = "^4.2.0"
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"
pytest-flask = "^1.3.0"
pytest-html = "^4.1.1"
pytest-asyncio = "^1.0.0"
pytest-xdist = "^3.7.0"


### Plugins PyTest
# pytest-cov	    Medição de cobertura com --cov, --cov-report=html/xml, etc.
# pytest-asyncio	Suporte a testes async def e await com asyncio.
#                   Flask/SQLAlchemy são síncronos, então não funciona aqui :')
# pytest-xdist	    Paralelização com -n auto, ótimo para acelerar os testes locais.
# pytest-mock	    Facilita o uso do unittest.mock com fixtures.
# pytest-django	    Para projetos Django, com setup de DB automático para testes.
# pytest-httpx	    Simula chamadas HTTP em testes com a lib httpx.


[tool.black]
line-length = 88


[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = 'True'
force_grid_wrap = 0
use_parentheses = 'True'
ensure_newline_before_comments = 'True'
line_length = 88


[tool.flake8]
max-line-length = 88
# extend-select = 'B950'
extend-ignore = ['E501'] # ['E203', 'E701']


[tool.bandit]
exclude_dirs = ["*/test_*.py", "*/*_test.py"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]


[tool.pytest.ini_options]
pythonpath = ["."]
minversion = "8.0"
addopts = """
    -ra
    -s
    -v
    --dist=loadfile
    --html=report.html
    --self-contained-html
    --junitxml=report.xml
    --cov=src
    --cov-report=html 
    --cov-report=xml 
    --disable-warnings
    """
    # -n 4
    # -q
# -s -v  mais verbosidade e exibir logs/print no terminal
# --junitxml=report.xml  para report CI/CD
# --maxfail=1 parar no primeiro erro
# -ra para relatório
# -q para menos verbosidade
# -n 4 - 'paralelizar'
# para ver o html de coverage: start htmlcov\index.html
# no sonar.properties: sonar.python.coverage.reportPaths=coverage.xml

testpaths = [
    "tests",
    ]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"


[tool.coverage.run]
branch = true
source = [
    "src",
    ]
omit = [
    "exemplos"
    ]


[tool.coverage.report]
show_missing = true
fail_under = 0
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "pass"
    ]
